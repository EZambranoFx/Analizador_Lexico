
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ARROW BOOLEAN BREAK CASE CATCH CLASS COMMA COMMENT CONST CONSTRUCT CONTINUE DEFAULT DIVIDE DO DOLLAR ECHO ELSE ELSEIF EMPTY EQ EQUALS ERROR EXP EXTENDS FINALLY FLOAT FOR FOREACH FUNCTION GE GT IDENTICAL IDENTIFIER IF IMPLEMENTS INTEGER LBRACE LBRACKET LE LPAREN LT MINUS MOD NE NEW NEWLINE NOT NOT_IDENTICAL OR PLUS PRIVATE PROTECTED PUBLIC RBRACE RBRACKET READLINE RETURN RPAREN SEMI STATIC STRING SWITCH THROW TIMES TRY VAR VARIABLE WHILEprogram : statement_liststatement : print_statement\n                 | input_statement\n                 | expression_statement\n                 | assignment_statement\n                 | condition_statement\n                 | data_structure_statement\n                 | function_statement\n                 | class_statementargument_list : expression\n                     | argument_list COMMA expressionassignment_statement : VARIABLE EQ expression SEMIcondition_statement : IF LPAREN condition RPAREN statement\n                           | IF LPAREN condition RPAREN statement ELSE statementdata_structure_statement : array_statement\n                                | class_statementarray_statement : VARIABLE EQ LBRACKET argument_list RBRACKET SEMIclass_statement : CLASS IDENTIFIER LBRACE class_body RBRACEclass_body_element : assignment_statement\n                          | function_statementfunction_statement : FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statement_list RBRACEobject_declaration : VAR VARIABLE EQUALS NEW CLASS LPAREN RPAREN SEMIwhile_statement : WHILE LPAREN expression RPAREN statementsfunction_variable : FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACEprint_statement : ECHO LPAREN expression_list RPAREN SEMI\n                       | ECHO expression_list SEMIinput_statement : VARIABLE EQUALS READLINE LPAREN RPAREN SEMIexpression_statement : expression SEMIarray : ARRAY LPAREN arrayArg RPAREN SEMIarrayArg : index ARROW value\n                | index ARROW value arrayArg\n                | index ARROW value COMMA arrayArgindex : INTEGER\n            | STRINGifStatement : IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI\n                    | IF LPAREN condition RPAREN LBRACE statements RBRACE elseStatementelseStatement : ELSE LBRACE statements RBRACE SEMIstatements : expression\n                | impression\n                | array\n                | declarationdeclaration : VARIABLE EQUALS value\n                | VARIABLE EQUALS arrayimpression : ECHO LPAREN value RPARENexpression_list : expression\n                        | expression COMMA expressioncompOperator : LT\n                    | GT\n                    | LE\n                    | GE\n                    | EQ\n                    | NEoperator : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDEvalue : VARIABLE\n            | INTEGER\n            | FLOAT\n            | expression_statementarrowFunction : FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI\n                    | FUNCTION LPAREN VARIABLE RPAREN ARROW arrowFunctionclass_declaration : CLASS IDENTIFIER LBRACE class_body RBRACEclass_body : class_member_listclass_member_list : class_member_list class_member\n                         | EMPTYclass_member : property_declaration\n                    | method_declaration\n                    | constructor_declarationproperty_declaration : visibility VARIABLE SEMImethod_declaration : visibility FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statement_list RBRACEconstructor_declaration : visibility FUNCTION CONSTRUCT LPAREN parameter_list RPAREN LBRACE statement_list RBRACEvisibility : PUBLIC\n                  | PROTECTED\n                  | PRIVATEparameter_list : parameter_list COMMA parameter\n                      | EMPTYparameter : VARIABLEstatement_list : statement_list statements\n                      | EMPTYcondition : expression comparison_operator expression\n                 | condition logical_operator conditioncomparison_operator : EQ\n                           | NE\n                           | LT\n                           | LE\n                           | GT\n                           | GElogical_operator : AND\n                        | OR\n                        | NOTexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | expression TIMES term\n                  | expression DIVIDE term\n                  | expression MOD term\n                  | expression EXP termterm : INTEGER\n            | FLOAT\n            | STRING\n            | VARIABLE\n            | LPAREN expression RPARENempty :'
    
_lr_action_items = {'EMPTY':([0,],[3,]),'$end':([1,2,3,4,5,6,7,8,9,13,14,15,16,25,28,29,30,31,32,33,35,36,37,38,40,45,46,47,48,51,],[0,-1,-80,-79,-38,-39,-40,-41,-92,-102,-99,-100,-101,-102,-93,-94,-95,-96,-97,-98,-57,-58,-59,-60,-103,-42,-43,-44,-28,-29,]),'ECHO':([2,3,4,5,6,7,8,9,13,14,15,16,25,28,29,30,31,32,33,35,36,37,38,40,45,46,47,48,51,],[10,-80,-79,-38,-39,-40,-41,-92,-102,-99,-100,-101,-102,-93,-94,-95,-96,-97,-98,-57,-58,-59,-60,-103,-42,-43,-44,-28,-29,]),'ARRAY':([2,3,4,5,6,7,8,9,13,14,15,16,25,27,28,29,30,31,32,33,35,36,37,38,40,45,46,47,48,51,],[12,-80,-79,-38,-39,-40,-41,-92,-102,-99,-100,-101,-102,12,-93,-94,-95,-96,-97,-98,-57,-58,-59,-60,-103,-42,-43,-44,-28,-29,]),'VARIABLE':([2,3,4,5,6,7,8,9,11,13,14,15,16,17,18,19,20,21,22,23,25,27,28,29,30,31,32,33,35,36,37,38,40,45,46,47,48,50,51,],[13,-80,-79,-38,-39,-40,-41,-92,25,-102,-99,-100,-101,25,25,25,25,25,25,35,-102,35,-93,-94,-95,-96,-97,-98,-57,-58,-59,-60,-103,-42,-43,-44,-28,35,-29,]),'INTEGER':([2,3,4,5,6,7,8,9,11,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,35,36,37,38,40,45,46,47,48,50,51,52,54,],[14,-80,-79,-38,-39,-40,-41,-92,14,-102,-99,-100,-101,14,14,14,14,14,14,36,-102,43,36,-93,-94,-95,-96,-97,-98,-57,-58,-59,-60,-103,-42,-43,-44,-28,36,-29,43,43,]),'FLOAT':([2,3,4,5,6,7,8,9,11,13,14,15,16,17,18,19,20,21,22,23,25,27,28,29,30,31,32,33,35,36,37,38,40,45,46,47,48,50,51,],[15,-80,-79,-38,-39,-40,-41,-92,15,-102,-99,-100,-101,15,15,15,15,15,15,37,-102,37,-93,-94,-95,-96,-97,-98,-57,-58,-59,-60,-103,-42,-43,-44,-28,37,-29,]),'STRING':([2,3,4,5,6,7,8,9,11,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,35,36,37,38,40,45,46,47,48,50,51,52,54,],[16,-80,-79,-38,-39,-40,-41,-92,16,-102,-99,-100,-101,16,16,16,16,16,16,16,-102,44,16,-93,-94,-95,-96,-97,-98,-57,-58,-59,-60,-103,-42,-43,-44,-28,16,-29,44,44,]),'LPAREN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,27,28,29,30,31,32,33,35,36,37,38,40,45,46,47,48,50,51,],[11,-80,-79,-38,-39,-40,-41,-92,23,11,26,-102,-99,-100,-101,11,11,11,11,11,11,11,-102,11,-93,-94,-95,-96,-97,-98,-57,-58,-59,-60,-103,-42,-43,-44,-28,11,-29,]),'PLUS':([5,9,13,14,15,16,24,25,28,29,30,31,32,33,35,36,37,39,40,],[17,-92,-102,-99,-100,-101,17,-102,-93,-94,-95,-96,-97,-98,-102,-99,-100,17,-103,]),'MINUS':([5,9,13,14,15,16,24,25,28,29,30,31,32,33,35,36,37,39,40,],[18,-92,-102,-99,-100,-101,18,-102,-93,-94,-95,-96,-97,-98,-102,-99,-100,18,-103,]),'TIMES':([5,9,13,14,15,16,24,25,28,29,30,31,32,33,35,36,37,39,40,],[19,-92,-102,-99,-100,-101,19,-102,-93,-94,-95,-96,-97,-98,-102,-99,-100,19,-103,]),'DIVIDE':([5,9,13,14,15,16,24,25,28,29,30,31,32,33,35,36,37,39,40,],[20,-92,-102,-99,-100,-101,20,-102,-93,-94,-95,-96,-97,-98,-102,-99,-100,20,-103,]),'MOD':([5,9,13,14,15,16,24,25,28,29,30,31,32,33,35,36,37,39,40,],[21,-92,-102,-99,-100,-101,21,-102,-93,-94,-95,-96,-97,-98,-102,-99,-100,21,-103,]),'EXP':([5,9,13,14,15,16,24,25,28,29,30,31,32,33,35,36,37,39,40,],[22,-92,-102,-99,-100,-101,22,-102,-93,-94,-95,-96,-97,-98,-102,-99,-100,22,-103,]),'RPAREN':([9,14,15,16,24,25,28,29,30,31,32,33,34,35,36,37,38,40,41,48,52,53,55,],[-92,-99,-100,-101,40,-102,-93,-94,-95,-96,-97,-98,47,-57,-58,-59,-60,-103,49,-28,-30,-31,-32,]),'SEMI':([9,14,15,16,25,28,29,30,31,32,33,35,36,37,39,40,49,],[-92,-99,-100,-101,-102,-93,-94,-95,-96,-97,-98,-102,-99,-100,48,-103,51,]),'EQUALS':([13,],[27,]),'COMMA':([35,36,37,38,48,52,],[-57,-58,-59,-60,-28,54,]),'ARROW':([42,43,44,],[50,-33,-34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statements':([2,],[4,]),'expression':([2,11,23,27,50,],[5,24,39,39,39,]),'impression':([2,],[6,]),'array':([2,27,],[7,46,]),'declaration':([2,],[8,]),'term':([2,11,17,18,19,20,21,22,23,27,50,],[9,9,28,29,30,31,32,33,9,9,9,]),'value':([23,27,50,],[34,45,52,]),'expression_statement':([23,27,50,],[38,38,38,]),'arrayArg':([26,52,54,],[41,53,55,]),'index':([26,52,54,],[42,42,42,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',10),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',22),
  ('statement -> input_statement','statement',1,'p_statement','parser.py',23),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',24),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',25),
  ('statement -> condition_statement','statement',1,'p_statement','parser.py',26),
  ('statement -> data_structure_statement','statement',1,'p_statement','parser.py',27),
  ('statement -> function_statement','statement',1,'p_statement','parser.py',28),
  ('statement -> class_statement','statement',1,'p_statement','parser.py',29),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',41),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','parser.py',42),
  ('assignment_statement -> VARIABLE EQ expression SEMI','assignment_statement',4,'p_assignment_statement','parser.py',53),
  ('condition_statement -> IF LPAREN condition RPAREN statement','condition_statement',5,'p_condition_statement','parser.py',57),
  ('condition_statement -> IF LPAREN condition RPAREN statement ELSE statement','condition_statement',7,'p_condition_statement','parser.py',58),
  ('data_structure_statement -> array_statement','data_structure_statement',1,'p_data_structure_statement','parser.py',65),
  ('data_structure_statement -> class_statement','data_structure_statement',1,'p_data_structure_statement','parser.py',66),
  ('array_statement -> VARIABLE EQ LBRACKET argument_list RBRACKET SEMI','array_statement',6,'p_array_statement','parser.py',70),
  ('class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE','class_statement',5,'p_class_statement','parser.py',74),
  ('class_body_element -> assignment_statement','class_body_element',1,'p_class_body_element','parser.py',86),
  ('class_body_element -> function_statement','class_body_element',1,'p_class_body_element','parser.py',87),
  ('function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statement_list RBRACE','function_statement',8,'p_function_statement','parser.py',91),
  ('object_declaration -> VAR VARIABLE EQUALS NEW CLASS LPAREN RPAREN SEMI','object_declaration',8,'p_object_declaration','parser.py',105),
  ('while_statement -> WHILE LPAREN expression RPAREN statements','while_statement',5,'p_while_statement','parser.py',109),
  ('function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE','function_variable',7,'p_function_variable','parser.py',113),
  ('print_statement -> ECHO LPAREN expression_list RPAREN SEMI','print_statement',5,'p_print_statement','parser.py',117),
  ('print_statement -> ECHO expression_list SEMI','print_statement',3,'p_print_statement','parser.py',118),
  ('input_statement -> VARIABLE EQUALS READLINE LPAREN RPAREN SEMI','input_statement',6,'p_input_statement','parser.py',122),
  ('expression_statement -> expression SEMI','expression_statement',2,'p_expression_statement','parser.py',126),
  ('array -> ARRAY LPAREN arrayArg RPAREN SEMI','array',5,'p_array','parser.py',136),
  ('arrayArg -> index ARROW value','arrayArg',3,'p_arrayArg','parser.py',139),
  ('arrayArg -> index ARROW value arrayArg','arrayArg',4,'p_arrayArg','parser.py',140),
  ('arrayArg -> index ARROW value COMMA arrayArg','arrayArg',5,'p_arrayArg','parser.py',141),
  ('index -> INTEGER','index',1,'p_index','parser.py',144),
  ('index -> STRING','index',1,'p_index','parser.py',145),
  ('ifStatement -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI','ifStatement',8,'p_ifStatement','parser.py',149),
  ('ifStatement -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseStatement','ifStatement',8,'p_ifStatement','parser.py',150),
  ('elseStatement -> ELSE LBRACE statements RBRACE SEMI','elseStatement',5,'p_elseStatement','parser.py',153),
  ('statements -> expression','statements',1,'p_statements','parser.py',156),
  ('statements -> impression','statements',1,'p_statements','parser.py',157),
  ('statements -> array','statements',1,'p_statements','parser.py',158),
  ('statements -> declaration','statements',1,'p_statements','parser.py',159),
  ('declaration -> VARIABLE EQUALS value','declaration',3,'p_declaration','parser.py',162),
  ('declaration -> VARIABLE EQUALS array','declaration',3,'p_declaration','parser.py',163),
  ('impression -> ECHO LPAREN value RPAREN','impression',4,'p_impression','parser.py',166),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',175),
  ('expression_list -> expression COMMA expression','expression_list',3,'p_expression_list','parser.py',176),
  ('compOperator -> LT','compOperator',1,'p_compOperator','parser.py',179),
  ('compOperator -> GT','compOperator',1,'p_compOperator','parser.py',180),
  ('compOperator -> LE','compOperator',1,'p_compOperator','parser.py',181),
  ('compOperator -> GE','compOperator',1,'p_compOperator','parser.py',182),
  ('compOperator -> EQ','compOperator',1,'p_compOperator','parser.py',183),
  ('compOperator -> NE','compOperator',1,'p_compOperator','parser.py',184),
  ('operator -> PLUS','operator',1,'p_operator','parser.py',187),
  ('operator -> MINUS','operator',1,'p_operator','parser.py',188),
  ('operator -> TIMES','operator',1,'p_operator','parser.py',189),
  ('operator -> DIVIDE','operator',1,'p_operator','parser.py',190),
  ('value -> VARIABLE','value',1,'p_value','parser.py',193),
  ('value -> INTEGER','value',1,'p_value','parser.py',194),
  ('value -> FLOAT','value',1,'p_value','parser.py',195),
  ('value -> expression_statement','value',1,'p_value','parser.py',196),
  ('arrowFunction -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI','arrowFunction',7,'p_arrowFunction','parser.py',200),
  ('arrowFunction -> FUNCTION LPAREN VARIABLE RPAREN ARROW arrowFunction','arrowFunction',6,'p_arrowFunction','parser.py',201),
  ('class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE','class_declaration',5,'p_class_declaration','parser.py',208),
  ('class_body -> class_member_list','class_body',1,'p_class_body','parser.py',211),
  ('class_member_list -> class_member_list class_member','class_member_list',2,'p_class_member_list','parser.py',214),
  ('class_member_list -> EMPTY','class_member_list',1,'p_class_member_list','parser.py',215),
  ('class_member -> property_declaration','class_member',1,'p_class_member','parser.py',218),
  ('class_member -> method_declaration','class_member',1,'p_class_member','parser.py',219),
  ('class_member -> constructor_declaration','class_member',1,'p_class_member','parser.py',220),
  ('property_declaration -> visibility VARIABLE SEMI','property_declaration',3,'p_property_declaration','parser.py',223),
  ('method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statement_list RBRACE','method_declaration',9,'p_method_declaration','parser.py',226),
  ('constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameter_list RPAREN LBRACE statement_list RBRACE','constructor_declaration',9,'p_constructor_declaration','parser.py',229),
  ('visibility -> PUBLIC','visibility',1,'p_visibility','parser.py',232),
  ('visibility -> PROTECTED','visibility',1,'p_visibility','parser.py',233),
  ('visibility -> PRIVATE','visibility',1,'p_visibility','parser.py',234),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',237),
  ('parameter_list -> EMPTY','parameter_list',1,'p_parameter_list','parser.py',238),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','parser.py',241),
  ('statement_list -> statement_list statements','statement_list',2,'p_statement_list','parser.py',244),
  ('statement_list -> EMPTY','statement_list',1,'p_statement_list','parser.py',245),
  ('condition -> expression comparison_operator expression','condition',3,'p_condition','parser.py',248),
  ('condition -> condition logical_operator condition','condition',3,'p_condition','parser.py',249),
  ('comparison_operator -> EQ','comparison_operator',1,'p_comparison_operator','parser.py',256),
  ('comparison_operator -> NE','comparison_operator',1,'p_comparison_operator','parser.py',257),
  ('comparison_operator -> LT','comparison_operator',1,'p_comparison_operator','parser.py',258),
  ('comparison_operator -> LE','comparison_operator',1,'p_comparison_operator','parser.py',259),
  ('comparison_operator -> GT','comparison_operator',1,'p_comparison_operator','parser.py',260),
  ('comparison_operator -> GE','comparison_operator',1,'p_comparison_operator','parser.py',261),
  ('logical_operator -> AND','logical_operator',1,'p_logical_operator','parser.py',265),
  ('logical_operator -> OR','logical_operator',1,'p_logical_operator','parser.py',266),
  ('logical_operator -> NOT','logical_operator',1,'p_logical_operator','parser.py',267),
  ('expression -> term','expression',1,'p_expression','parser.py',271),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',272),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',273),
  ('expression -> expression TIMES term','expression',3,'p_expression','parser.py',274),
  ('expression -> expression DIVIDE term','expression',3,'p_expression','parser.py',275),
  ('expression -> expression MOD term','expression',3,'p_expression','parser.py',276),
  ('expression -> expression EXP term','expression',3,'p_expression','parser.py',277),
  ('term -> INTEGER','term',1,'p_term','parser.py',284),
  ('term -> FLOAT','term',1,'p_term','parser.py',285),
  ('term -> STRING','term',1,'p_term','parser.py',286),
  ('term -> VARIABLE','term',1,'p_term','parser.py',287),
  ('term -> LPAREN expression RPAREN','term',3,'p_term','parser.py',288),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',295),
]
