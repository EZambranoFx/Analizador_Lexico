
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ARROW BREAK CASE CATCH CLASS COMMA COMMENT CONST CONSTRUCT CONTINUE DEFAULT DIVIDE DO DOLLAR ECHO ELSE ELSEIF EQ ERROR EXP EXTENDS FINALLY FLOAT FOR FOREACH FUNCTION GE GT IDENTICAL IDENTIFIER IF IMPLEMENTS INTEGER LBRACE LBRACKET LE LPAREN LT MINUS MOD NE NEW NEWLINE NOT NOT_IDENTICAL OR PLUS PRIVATE PROTECTED PUBLIC RBRACE RBRACKET READLINE RETURN RPAREN SEMI SET STATIC STRING SWITCH THROW TIMES TRY TYPE USE VAR VARIABLE WHILEobject_declaration : VAR VARIABLE EQ NEW CLASS LPAREN RPAREN SEMIstatement : print_statement\n                 | input_statement\n                 | expression_statement\n                 | assignment_statement\n                 | condition\n                 | data_structure_statement\n                 | function_statement\n                 | class_statement\n                 | ifStatement\n                 | arrayassignment_statement : VARIABLE EQ expression SEMIdata_structure_statement : array\n                                | class_statementclass_statement : CLASS IDENTIFIER LBRACE class_body RBRACEfunction_statement : FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statement_list RBRACEwhile_statement : WHILE LPAREN expression RPAREN statementfunction_variable : FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACEprint_statement : ECHO LPAREN expression_list RPAREN SEMI\n                       | ECHO expression_list SEMIinput_statement : VARIABLE EQ READLINE LPAREN RPAREN SEMI\n                       | emptyexpression_statement : expression SEMIarray : ARRAY LPAREN arrayArg RPAREN SEMIarrayArg : index ARROW value\n                | index ARROW value arrayArg\n                | index ARROW value COMMA arrayArgifStatement : IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI\n                    | IF LPAREN condition RPAREN LBRACE statements RBRACE elseStatementelseStatement : ELSE LBRACE statements RBRACE SEMIcondition : expression comparison_operator expression\n                 | condition logical_operator conditionindex : INTEGER\n            | STRINGarrowFunction : FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI\n                    | FUNCTION LPAREN VARIABLE RPAREN ARROW arrowFunctioncomparison_operator : LT\n                            | GT\n                            | LE\n                            | GE\n                            | EQ\n                            | NEvalue : VARIABLE\n            | INTEGER\n            | FLOAT\n            | expression_statementexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | expression TIMES term\n                  | expression DIVIDE termexpression_list : expression_list COMMA expression\n                       | expressionempty :statements : statements statement\n                  | statement\n                  | emptycompound_statement : LBRACE statements RBRACEclass_declaration : CLASS IDENTIFIER LBRACE class_body RBRACEclass_body : class_member_listclass_member_list : class_member_list class_member\n                         | emptyclass_member : property_declaration\n                    | method_declaration\n                    | constructor_declarationproperty_declaration : visibility VARIABLE SEMImethod_declaration : visibility FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statement_list RBRACEconstructor_declaration : visibility FUNCTION CONSTRUCT LPAREN parameter_list RPAREN LBRACE statement_list RBRACEvisibility : PUBLIC\n                  | PROTECTED\n                  | PRIVATEparameter_list : parameter_list COMMA parameter\n                      | emptyparameter : TYPE VARIABLE\n                 | VARIABLEstatement_list : statement_list statement\n                      | statementelseif_statement : ELSEIF LPAREN expression RPAREN statementanonymous_function : FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statement_list RBRACEuse_clause_opt : USE LPAREN variable_list RPAREN\n                      | emptyvariable_list : variable_list COMMA VARIABLE\n                     | VARIABLElogical_operator : AND\n                        | ORvariable_declaration : VARIABLE EQ expression SEMI\n                            | VARIABLE EQ condition SEMIterm : INTEGER\n            | STRING\n            | VARIABLE\n            | LPAREN expression RPARENarray_declaration : VARIABLE EQ ARRAY LPAREN array_elements RPAREN SEMIarray_elements : array_elements COMMA array_element\n                      | array_element\n                      | emptyarray_element : expression\n                     | expression ARROW expression'
    
_lr_action_items = {'VAR':([0,],[2,]),'$end':([1,9,],[0,-1,]),'VARIABLE':([2,],[3,]),'EQ':([3,],[4,]),'NEW':([4,],[5,]),'CLASS':([5,],[6,]),'LPAREN':([6,],[7,]),'RPAREN':([7,],[8,]),'SEMI':([8,],[9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'object_declaration':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> object_declaration","S'",1,None,None,None),
  ('object_declaration -> VAR VARIABLE EQ NEW CLASS LPAREN RPAREN SEMI','object_declaration',8,'p_object_declaration','parser.py',11),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',14),
  ('statement -> input_statement','statement',1,'p_statement','parser.py',15),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',16),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',17),
  ('statement -> condition','statement',1,'p_statement','parser.py',18),
  ('statement -> data_structure_statement','statement',1,'p_statement','parser.py',19),
  ('statement -> function_statement','statement',1,'p_statement','parser.py',20),
  ('statement -> class_statement','statement',1,'p_statement','parser.py',21),
  ('statement -> ifStatement','statement',1,'p_statement','parser.py',22),
  ('statement -> array','statement',1,'p_statement','parser.py',23),
  ('assignment_statement -> VARIABLE EQ expression SEMI','assignment_statement',4,'p_assignment_statement','parser.py',27),
  ('data_structure_statement -> array','data_structure_statement',1,'p_data_structure_statement','parser.py',31),
  ('data_structure_statement -> class_statement','data_structure_statement',1,'p_data_structure_statement','parser.py',32),
  ('class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE','class_statement',5,'p_class_statement','parser.py',36),
  ('function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statement_list RBRACE','function_statement',8,'p_function_statement','parser.py',40),
  ('while_statement -> WHILE LPAREN expression RPAREN statement','while_statement',5,'p_while_statement','parser.py',45),
  ('function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE','function_variable',7,'p_function_variable','parser.py',50),
  ('print_statement -> ECHO LPAREN expression_list RPAREN SEMI','print_statement',5,'p_print_statement','parser.py',55),
  ('print_statement -> ECHO expression_list SEMI','print_statement',3,'p_print_statement','parser.py',56),
  ('input_statement -> VARIABLE EQ READLINE LPAREN RPAREN SEMI','input_statement',6,'p_input_statement','parser.py',61),
  ('input_statement -> empty','input_statement',1,'p_input_statement','parser.py',62),
  ('expression_statement -> expression SEMI','expression_statement',2,'p_expression_statement','parser.py',67),
  ('array -> ARRAY LPAREN arrayArg RPAREN SEMI','array',5,'p_array','parser.py',76),
  ('arrayArg -> index ARROW value','arrayArg',3,'p_arrayArg','parser.py',80),
  ('arrayArg -> index ARROW value arrayArg','arrayArg',4,'p_arrayArg','parser.py',81),
  ('arrayArg -> index ARROW value COMMA arrayArg','arrayArg',5,'p_arrayArg','parser.py',82),
  ('ifStatement -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI','ifStatement',8,'p_ifStatement','parser.py',87),
  ('ifStatement -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseStatement','ifStatement',8,'p_ifStatement','parser.py',88),
  ('elseStatement -> ELSE LBRACE statements RBRACE SEMI','elseStatement',5,'p_elseStatement','parser.py',92),
  ('condition -> expression comparison_operator expression','condition',3,'p_condition','parser.py',96),
  ('condition -> condition logical_operator condition','condition',3,'p_condition','parser.py',97),
  ('index -> INTEGER','index',1,'p_index','parser.py',105),
  ('index -> STRING','index',1,'p_index','parser.py',106),
  ('arrowFunction -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI','arrowFunction',7,'p_arrowFunction','parser.py',111),
  ('arrowFunction -> FUNCTION LPAREN VARIABLE RPAREN ARROW arrowFunction','arrowFunction',6,'p_arrowFunction','parser.py',112),
  ('comparison_operator -> LT','comparison_operator',1,'p_comparison_operator','parser.py',117),
  ('comparison_operator -> GT','comparison_operator',1,'p_comparison_operator','parser.py',118),
  ('comparison_operator -> LE','comparison_operator',1,'p_comparison_operator','parser.py',119),
  ('comparison_operator -> GE','comparison_operator',1,'p_comparison_operator','parser.py',120),
  ('comparison_operator -> EQ','comparison_operator',1,'p_comparison_operator','parser.py',121),
  ('comparison_operator -> NE','comparison_operator',1,'p_comparison_operator','parser.py',122),
  ('value -> VARIABLE','value',1,'p_value','parser.py',126),
  ('value -> INTEGER','value',1,'p_value','parser.py',127),
  ('value -> FLOAT','value',1,'p_value','parser.py',128),
  ('value -> expression_statement','value',1,'p_value','parser.py',129),
  ('expression -> term','expression',1,'p_expression','parser.py',137),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',138),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',139),
  ('expression -> expression TIMES term','expression',3,'p_expression','parser.py',140),
  ('expression -> expression DIVIDE term','expression',3,'p_expression','parser.py',141),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',145),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',146),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',150),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',155),
  ('statements -> statement','statements',1,'p_statements','parser.py',156),
  ('statements -> empty','statements',1,'p_statements','parser.py',157),
  ('compound_statement -> LBRACE statements RBRACE','compound_statement',3,'p_compound_statement','parser.py',161),
  ('class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE','class_declaration',5,'p_class_declaration','parser.py',165),
  ('class_body -> class_member_list','class_body',1,'p_class_body','parser.py',169),
  ('class_member_list -> class_member_list class_member','class_member_list',2,'p_class_member_list','parser.py',173),
  ('class_member_list -> empty','class_member_list',1,'p_class_member_list','parser.py',174),
  ('class_member -> property_declaration','class_member',1,'p_class_member','parser.py',178),
  ('class_member -> method_declaration','class_member',1,'p_class_member','parser.py',179),
  ('class_member -> constructor_declaration','class_member',1,'p_class_member','parser.py',180),
  ('property_declaration -> visibility VARIABLE SEMI','property_declaration',3,'p_property_declaration','parser.py',184),
  ('method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statement_list RBRACE','method_declaration',9,'p_method_declaration','parser.py',188),
  ('constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameter_list RPAREN LBRACE statement_list RBRACE','constructor_declaration',9,'p_constructor_declaration','parser.py',192),
  ('visibility -> PUBLIC','visibility',1,'p_visibility','parser.py',196),
  ('visibility -> PROTECTED','visibility',1,'p_visibility','parser.py',197),
  ('visibility -> PRIVATE','visibility',1,'p_visibility','parser.py',198),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',202),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','parser.py',203),
  ('parameter -> TYPE VARIABLE','parameter',2,'p_parameter','parser.py',207),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','parser.py',208),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',212),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',213),
  ('elseif_statement -> ELSEIF LPAREN expression RPAREN statement','elseif_statement',5,'p_elseif_statement','parser.py',218),
  ('anonymous_function -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statement_list RBRACE','anonymous_function',8,'p_anonymous_function','parser.py',223),
  ('use_clause_opt -> USE LPAREN variable_list RPAREN','use_clause_opt',4,'p_use_clause_opt','parser.py',227),
  ('use_clause_opt -> empty','use_clause_opt',1,'p_use_clause_opt','parser.py',228),
  ('variable_list -> variable_list COMMA VARIABLE','variable_list',3,'p_variable_list','parser.py',232),
  ('variable_list -> VARIABLE','variable_list',1,'p_variable_list','parser.py',233),
  ('logical_operator -> AND','logical_operator',1,'p_logical_operator','parser.py',237),
  ('logical_operator -> OR','logical_operator',1,'p_logical_operator','parser.py',238),
  ('variable_declaration -> VARIABLE EQ expression SEMI','variable_declaration',4,'p_variable_declaration','parser.py',243),
  ('variable_declaration -> VARIABLE EQ condition SEMI','variable_declaration',4,'p_variable_declaration','parser.py',244),
  ('term -> INTEGER','term',1,'p_term','parser.py',248),
  ('term -> STRING','term',1,'p_term','parser.py',249),
  ('term -> VARIABLE','term',1,'p_term','parser.py',250),
  ('term -> LPAREN expression RPAREN','term',3,'p_term','parser.py',251),
  ('array_declaration -> VARIABLE EQ ARRAY LPAREN array_elements RPAREN SEMI','array_declaration',7,'p_array_declaration','parser.py',256),
  ('array_elements -> array_elements COMMA array_element','array_elements',3,'p_array_elements','parser.py',260),
  ('array_elements -> array_element','array_elements',1,'p_array_elements','parser.py',261),
  ('array_elements -> empty','array_elements',1,'p_array_elements','parser.py',262),
  ('array_element -> expression','array_element',1,'p_array_element','parser.py',266),
  ('array_element -> expression ARROW expression','array_element',3,'p_array_element','parser.py',267),
]
