NEWLINE: 
 (line 1)
LT: < (line 2)
IDENTIFIER: php (line 2)
NEWLINE: 

 (line 2)
NEWLINE: 

 (line 4)
NEWLINE: 

 (line 6)
NEWLINE: 

 (line 8)
NEWLINE: 
 (line 10)
IDENTIFIER: entero (line 11)
INTEGER: 32 (line 11)
SEMI: ; (line 11)
NEWLINE: 
 (line 11)
IDENTIFIER: flotante (line 12)
FLOAT: 6.28 (line 12)
SEMI: ; (line 12)
NEWLINE: 
 (line 12)
IDENTIFIER: cadena (line 13)
STRING: "Hola Mundo" (line 13)
SEMI: ; (line 13)
NEWLINE: 
 (line 13)
IDENTIFIER: booleano (line 14)
IDENTIFIER: false (line 14)
SEMI: ; (line 14)
NEWLINE: 

 (line 14)
NEWLINE: 
 (line 16)
IDENTIFIER: arreglo (line 17)
LBRACKET: [ (line 17)
INTEGER: 7 (line 17)
COMMA: , (line 17)
IDENTIFIER: i (line 17)
COMMA: , (line 17)
LBRACKET: [ (line 17)
INTEGER: 1 (line 17)
COMMA: , (line 17)
INTEGER: 2 (line 17)
RBRACKET: ] (line 17)
RBRACKET: ] (line 17)
SEMI: ; (line 17)
NEWLINE: 

 (line 17)
NEWLINE: 
 (line 19)
CLASS: class (line 20)
IDENTIFIER: Clase (line 20)
LBRACE: { (line 20)
NEWLINE: 
 (line 20)
PUBLIC: public (line 21)
IDENTIFIER: propiedad (line 21)
STRING: "valor" (line 21)
SEMI: ; (line 21)
NEWLINE: 
 (line 21)
PUBLIC: public (line 22)
FUNCTION: function (line 22)
IDENTIFIER: m (line 22)
IDENTIFIER: todo (line 22)
LPAREN: ( (line 22)
IDENTIFIER: parametro (line 22)
RPAREN: ) (line 22)
LBRACE: { (line 22)
NEWLINE: 
 (line 22)
IDENTIFIER: echo (line 23)
IDENTIFIER: parametro (line 23)
SEMI: ; (line 23)
NEWLINE: 
 (line 23)
RETURN: return (line 24)
SEMI: ; (line 24)
NEWLINE: 
 (line 24)
RBRACE: } (line 25)
NEWLINE: 
 (line 25)
RBRACE: } (line 26)
NEWLINE: 
 (line 26)
IDENTIFIER: instancia (line 27)
NEW: new (line 27)
IDENTIFIER: Clase (line 27)
LPAREN: ( (line 27)
RPAREN: ) (line 27)
SEMI: ; (line 27)
NEWLINE: 
 (line 27)
IDENTIFIER: echo (line 28)
IDENTIFIER: instancia (line 28)
MINUS: - (line 28)
GT: > (line 28)
IDENTIFIER: m (line 28)
IDENTIFIER: todo (line 28)
LPAREN: ( (line 28)
IDENTIFIER: Hola (line 28)
RPAREN: ) (line 28)
NEWLINE: 
 (line 28)
SEMI: ; (line 29)
NEWLINE: 

 (line 29)
NEWLINE: 
 (line 31)
IDENTIFIER: suma (line 32)
IDENTIFIER: entero (line 32)
PLUS: + (line 32)
INTEGER: 5 (line 32)
SEMI: ; (line 32)
NEWLINE: 
 (line 32)
IDENTIFIER: resta (line 33)
IDENTIFIER: entero (line 33)
MINUS: - (line 33)
INTEGER: 3 (line 33)
SEMI: ; (line 33)
NEWLINE: 
 (line 33)
IDENTIFIER: multiplicaci (line 34)
IDENTIFIER: n (line 34)
IDENTIFIER: entero (line 34)
TIMES: * (line 34)
INTEGER: 2 (line 34)
SEMI: ; (line 34)
NEWLINE: 
 (line 34)
IDENTIFIER: divisi (line 35)
IDENTIFIER: n (line 35)
IDENTIFIER: entero (line 35)
DIVIDE: / (line 35)
INTEGER: 2 (line 35)
SEMI: ; (line 35)
NEWLINE: 
 (line 35)
IDENTIFIER: modulo (line 36)
IDENTIFIER: entero (line 36)
MOD: % (line 36)
INTEGER: 3 (line 36)
SEMI: ; (line 36)
NEWLINE: 
 (line 36)
IDENTIFIER: entero (line 37)
PLUS: + (line 37)
INTEGER: 2 (line 37)
SEMI: ; (line 37)
NEWLINE: 

 (line 37)
NEWLINE: 
 (line 39)
IDENTIFIER: and (line 40)
IDENTIFIER: booleano (line 40)
AND: && (line 40)
IDENTIFIER: false (line 40)
SEMI: ; (line 40)
NEWLINE: 
 (line 40)
IDENTIFIER: or (line 41)
IDENTIFIER: booleano (line 41)
OR: || (line 41)
IDENTIFIER: false (line 41)
SEMI: ; (line 41)
NEWLINE: 
 (line 41)
IDENTIFIER: not (line 42)
NOT: ! (line 42)
IDENTIFIER: booleano (line 42)
SEMI: ; (line 42)
NEWLINE: 

 (line 42)
NEWLINE: 
 (line 44)
IF: if (line 45)
LPAREN: ( (line 45)
IDENTIFIER: entero (line 45)
GE: >= (line 45)
INTEGER: 10 (line 45)
RPAREN: ) (line 45)
LBRACE: { (line 45)
NEWLINE: 
 (line 45)
IDENTIFIER: echo (line 46)
IDENTIFIER: Mayor (line 46)
IDENTIFIER: que (line 46)
INTEGER: 10 (line 46)
NEWLINE: 
 (line 46)
SEMI: ; (line 47)
NEWLINE: 
 (line 47)
RBRACE: } (line 48)
ELSE: else (line 48)
IF: if (line 48)
LPAREN: ( (line 48)
IDENTIFIER: entero (line 48)
LT: < (line 48)
INTEGER: 5 (line 48)
RPAREN: ) (line 48)
LBRACE: { (line 48)
NEWLINE: 
 (line 48)
IDENTIFIER: Echo (line 49)
IDENTIFIER: Entre (line 49)
INTEGER: 1 (line 49)
IDENTIFIER: y (line 49)
INTEGER: 5 (line 49)
NEWLINE: 
 (line 49)
SEMI: ; (line 50)
NEWLINE: 
 (line 50)
RBRACE: } (line 51)
ELSE: else (line 51)
LBRACE: { (line 51)
NEWLINE: 
 (line 51)
IDENTIFIER: echo (line 52)
IDENTIFIER: Entre (line 52)
INTEGER: 10 (line 52)
IDENTIFIER: y (line 52)
INTEGER: 5 (line 52)
NEWLINE: 
 (line 52)
SEMI: ; (line 53)
NEWLINE: 
 (line 53)
RBRACE: } (line 54)
NEWLINE: 

 (line 54)
NEWLINE: 
 (line 56)
IDENTIFIER: i (line 57)
INTEGER: 1 (line 57)
SEMI: ; (line 57)
NEWLINE: 
 (line 57)
WHILE: while (line 58)
LPAREN: ( (line 58)
IDENTIFIER: i (line 58)
LE: <= (line 58)
INTEGER: 10 (line 58)
RPAREN: ) (line 58)
LBRACE: { (line 58)
NEWLINE: 
 (line 58)
IDENTIFIER: echo (line 59)
IDENTIFIER: i (line 59)
PLUS: + (line 59)
PLUS: + (line 59)
SEMI: ; (line 59)
NEWLINE: 
 (line 59)
RBRACE: } (line 60)
NEWLINE: 

 (line 60)
NEWLINE: 
 (line 62)
FUNCTION: function (line 63)
IDENTIFIER: multiplicaci (line 63)
IDENTIFIER: n (line 63)
LPAREN: ( (line 63)
IDENTIFIER: a (line 63)
COMMA: , (line 63)
IDENTIFIER: b (line 63)
RPAREN: ) (line 63)
LBRACE: { (line 63)
NEWLINE: 
 (line 63)
RETURN: return (line 64)
IDENTIFIER: a (line 64)
TIMES: * (line 64)
IDENTIFIER: b (line 64)
SEMI: ; (line 64)
NEWLINE: 
 (line 64)
RBRACE: } (line 65)
NEWLINE: 

 (line 65)
IDENTIFIER: echo (line 67)
IDENTIFIER: suma (line 67)
LPAREN: ( (line 67)
INTEGER: 2 (line 67)
COMMA: , (line 67)
INTEGER: 3 (line 67)
RPAREN: ) (line 67)
NEWLINE: 
 (line 67)
SEMI: ; (line 68)
NEWLINE: 
 (line 68)
GT: > (line 69)
NEWLINE: 
 (line 69)
