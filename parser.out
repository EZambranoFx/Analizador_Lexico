Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CASE
    CATCH
    COMMENT
    CONST
    CONTINUE
    DEFAULT
    DO
    DOLLAR
    ERROR
    EXP
    EXTENDS
    FINALLY
    FOR
    FOREACH
    IDENTICAL
    IMPLEMENTS
    LBRACKET
    MOD
    NEWLINE
    NOT
    NOT_IDENTICAL
    RBRACKET
    RETURN
    SET
    STATIC
    SWITCH
    THROW
    TRY

Grammar

Rule 0     S' -> object_declaration
Rule 1     object_declaration -> VAR VARIABLE EQ NEW CLASS LPAREN RPAREN SEMI
Rule 2     statement -> print_statement
Rule 3     statement -> input_statement
Rule 4     statement -> expression_statement
Rule 5     statement -> assignment_statement
Rule 6     statement -> condition
Rule 7     statement -> data_structure_statement
Rule 8     statement -> function_statement
Rule 9     statement -> class_statement
Rule 10    statement -> ifStatement
Rule 11    statement -> array
Rule 12    assignment_statement -> VARIABLE EQ expression SEMI
Rule 13    data_structure_statement -> array
Rule 14    data_structure_statement -> class_statement
Rule 15    class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE
Rule 16    function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statement_list RBRACE
Rule 17    while_statement -> WHILE LPAREN expression RPAREN statement
Rule 18    function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
Rule 19    print_statement -> ECHO LPAREN expression_list RPAREN SEMI
Rule 20    print_statement -> ECHO expression_list SEMI
Rule 21    input_statement -> VARIABLE EQ READLINE LPAREN RPAREN SEMI
Rule 22    input_statement -> empty
Rule 23    expression_statement -> expression SEMI
Rule 24    array -> ARRAY LPAREN arrayArg RPAREN SEMI
Rule 25    arrayArg -> index ARROW value
Rule 26    arrayArg -> index ARROW value arrayArg
Rule 27    arrayArg -> index ARROW value COMMA arrayArg
Rule 28    ifStatement -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
Rule 29    ifStatement -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseStatement
Rule 30    elseStatement -> ELSE LBRACE statements RBRACE SEMI
Rule 31    condition -> expression comparison_operator expression
Rule 32    condition -> condition logical_operator condition
Rule 33    index -> INTEGER
Rule 34    index -> STRING
Rule 35    arrowFunction -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
Rule 36    arrowFunction -> FUNCTION LPAREN VARIABLE RPAREN ARROW arrowFunction
Rule 37    comparison_operator -> LT
Rule 38    comparison_operator -> GT
Rule 39    comparison_operator -> LE
Rule 40    comparison_operator -> GE
Rule 41    comparison_operator -> EQ
Rule 42    comparison_operator -> NE
Rule 43    value -> VARIABLE
Rule 44    value -> INTEGER
Rule 45    value -> FLOAT
Rule 46    value -> expression_statement
Rule 47    expression -> term
Rule 48    expression -> expression PLUS term
Rule 49    expression -> expression MINUS term
Rule 50    expression -> expression TIMES term
Rule 51    expression -> expression DIVIDE term
Rule 52    expression_list -> expression_list COMMA expression
Rule 53    expression_list -> expression
Rule 54    empty -> <empty>
Rule 55    statements -> statements statement
Rule 56    statements -> statement
Rule 57    statements -> empty
Rule 58    compound_statement -> LBRACE statements RBRACE
Rule 59    class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE
Rule 60    class_body -> class_member_list
Rule 61    class_member_list -> class_member_list class_member
Rule 62    class_member_list -> empty
Rule 63    class_member -> property_declaration
Rule 64    class_member -> method_declaration
Rule 65    class_member -> constructor_declaration
Rule 66    property_declaration -> visibility VARIABLE SEMI
Rule 67    method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statement_list RBRACE
Rule 68    constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameter_list RPAREN LBRACE statement_list RBRACE
Rule 69    visibility -> PUBLIC
Rule 70    visibility -> PROTECTED
Rule 71    visibility -> PRIVATE
Rule 72    parameter_list -> parameter_list COMMA parameter
Rule 73    parameter_list -> empty
Rule 74    parameter -> TYPE VARIABLE
Rule 75    parameter -> VARIABLE
Rule 76    statement_list -> statement_list statement
Rule 77    statement_list -> statement
Rule 78    elseif_statement -> ELSEIF LPAREN expression RPAREN statement
Rule 79    anonymous_function -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statement_list RBRACE
Rule 80    use_clause_opt -> USE LPAREN variable_list RPAREN
Rule 81    use_clause_opt -> empty
Rule 82    variable_list -> variable_list COMMA VARIABLE
Rule 83    variable_list -> VARIABLE
Rule 84    logical_operator -> AND
Rule 85    logical_operator -> OR
Rule 86    variable_declaration -> VARIABLE EQ expression SEMI
Rule 87    variable_declaration -> VARIABLE EQ condition SEMI
Rule 88    term -> INTEGER
Rule 89    term -> STRING
Rule 90    term -> VARIABLE
Rule 91    term -> LPAREN expression RPAREN
Rule 92    array_declaration -> VARIABLE EQ ARRAY LPAREN array_elements RPAREN SEMI
Rule 93    array_elements -> array_elements COMMA array_element
Rule 94    array_elements -> array_element
Rule 95    array_elements -> empty
Rule 96    array_element -> expression
Rule 97    array_element -> expression ARROW expression

Terminals, with rules where they appear

AND                  : 84
ARRAY                : 24 92
ARROW                : 25 26 27 35 36 97
BREAK                : 
CASE                 : 
CATCH                : 
CLASS                : 1 15 59
COMMA                : 27 52 72 82 93
COMMENT              : 
CONST                : 
CONSTRUCT            : 68
CONTINUE             : 
DEFAULT              : 
DIVIDE               : 51
DO                   : 
DOLLAR               : 
ECHO                 : 19 20
ELSE                 : 30
ELSEIF               : 78
EQ                   : 1 12 21 41 86 87 92
ERROR                : 
EXP                  : 
EXTENDS              : 
FINALLY              : 
FLOAT                : 45
FOR                  : 
FOREACH              : 
FUNCTION             : 16 18 35 36 67 68 79
GE                   : 40
GT                   : 38
IDENTICAL            : 
IDENTIFIER           : 15 16 59 67
IF                   : 28 29
IMPLEMENTS           : 
INTEGER              : 33 44 88
LBRACE               : 15 16 18 28 29 30 58 59 67 68 79
LBRACKET             : 
LE                   : 39
LPAREN               : 1 16 17 18 19 21 24 28 29 35 36 67 68 78 79 80 91 92
LT                   : 37
MINUS                : 49
MOD                  : 
NE                   : 42
NEW                  : 1
NEWLINE              : 
NOT                  : 
NOT_IDENTICAL        : 
OR                   : 85
PLUS                 : 48
PRIVATE              : 71
PROTECTED            : 70
PUBLIC               : 69
RBRACE               : 15 16 18 28 29 30 58 59 67 68 79
RBRACKET             : 
READLINE             : 21
RETURN               : 
RPAREN               : 1 16 17 18 19 21 24 28 29 35 36 67 68 78 79 80 91 92
SEMI                 : 1 12 19 20 21 23 24 28 30 35 66 86 87 92
SET                  : 
STATIC               : 
STRING               : 34 89
SWITCH               : 
THROW                : 
TIMES                : 50
TRY                  : 
TYPE                 : 74
USE                  : 80
VAR                  : 1
VARIABLE             : 1 12 18 21 35 36 43 66 74 75 82 83 86 87 90 92
WHILE                : 17
error                : 

Nonterminals, with rules where they appear

anonymous_function   : 
array                : 11 13
arrayArg             : 24 26 27
array_declaration    : 
array_element        : 93 94
array_elements       : 92 93
arrowFunction        : 36
assignment_statement : 5
class_body           : 15 59
class_declaration    : 
class_member         : 61
class_member_list    : 60 61
class_statement      : 9 14
comparison_operator  : 31
compound_statement   : 
condition            : 6 28 29 32 32 87
constructor_declaration : 65
data_structure_statement : 7
elseStatement        : 29
elseif_statement     : 
empty                : 22 57 62 73 81 95
expression           : 12 17 23 31 31 35 48 49 50 51 52 53 78 86 91 96 97 97
expression_list      : 19 20 52
expression_statement : 4 46
function_statement   : 8
function_variable    : 
ifStatement          : 10
index                : 25 26 27
input_statement      : 3
logical_operator     : 32
method_declaration   : 64
object_declaration   : 0
parameter            : 72
parameter_list       : 16 67 68 72 79
print_statement      : 2
property_declaration : 63
statement            : 17 55 56 76 77 78
statement_list       : 16 67 68 76 79
statements           : 18 28 29 30 55 58
term                 : 47 48 49 50 51
use_clause_opt       : 79
value                : 25 26 27
variable_declaration : 
variable_list        : 80 82
visibility           : 66 67 68
while_statement      : 

Parsing method: LALR

state 0

    (0) S' -> . object_declaration
    (1) object_declaration -> . VAR VARIABLE EQ NEW CLASS LPAREN RPAREN SEMI

    VAR             shift and go to state 2

    object_declaration             shift and go to state 1

state 1

    (0) S' -> object_declaration .



state 2

    (1) object_declaration -> VAR . VARIABLE EQ NEW CLASS LPAREN RPAREN SEMI

    VARIABLE        shift and go to state 3


state 3

    (1) object_declaration -> VAR VARIABLE . EQ NEW CLASS LPAREN RPAREN SEMI

    EQ              shift and go to state 4


state 4

    (1) object_declaration -> VAR VARIABLE EQ . NEW CLASS LPAREN RPAREN SEMI

    NEW             shift and go to state 5


state 5

    (1) object_declaration -> VAR VARIABLE EQ NEW . CLASS LPAREN RPAREN SEMI

    CLASS           shift and go to state 6


state 6

    (1) object_declaration -> VAR VARIABLE EQ NEW CLASS . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 7


state 7

    (1) object_declaration -> VAR VARIABLE EQ NEW CLASS LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 8


state 8

    (1) object_declaration -> VAR VARIABLE EQ NEW CLASS LPAREN RPAREN . SEMI

    SEMI            shift and go to state 9


state 9

    (1) object_declaration -> VAR VARIABLE EQ NEW CLASS LPAREN RPAREN SEMI .

    $end            reduce using rule 1 (object_declaration -> VAR VARIABLE EQ NEW CLASS LPAREN RPAREN SEMI .)

